<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ticketEvent">
	<sql id="search">
		<if test="searchKey=='all'">
			INSTR(SUBJECT,${searchValue}) &gt; 0 or INSTR(CONTENT,${searchValue}) &gt; 0
		</if>
		<if test="searchKey=='subject'">
			INSTR(SUBJECT,${searchValue}) &gt; 0
		</if>
		<if test="searchKey=='content'">
			INSTR(CONTENT,${searchValue}) &gt; 0
		</if>
	</sql>
	
	<select id="eventList" parameterType="map" resultType="com.sp.ticket.Event">
		select * from (
			select tb.*, rownum rnum from(
				select eventNum, subject, content, se.adminIdx, se.created, endDate, adminName, hitCount
				from storeEvent se
				join admin a on se.adminIdx=a.adminIdx
				<if test="searchKey!=''">
					<where>
						<include refid="search"/>
					</where>
				</if>
				order by eventNum desc
			)tb where rownum &lt;= #{end}
		) where rnum &gt;= #{start}
		
	</select>
	
	<select id="articleCount" parameterType="map" resultType="Integer">
		select NVL(count(*),0) from storeEvent
		<if test="searchKey!=''">
			<where>
				<include refid="search"/>
			</where>
		</if>
	</select>
	
	<update id="updateHitCount" parameterType="Integer">
		update storeEvent set hitCount = hitCount+1 where eventNum=#{eventNum}
	</update>
	
	<select id="eventArticle" parameterType="Integer" resultType="com.sp.ticket.Event">
		select eventNum, subject, content, adminIdx, created, saveFilename, startDate, endDate from storeEvent where eventNum=#{eventNum}
	</select>
	
	<insert id="insertReply" parameterType="com.sp.ticket.EventReply">
		insert into storeEventReply(replyNum, eventNum, content, userIdx) values(STOREEVENTREPLY_SEQ.nextval,#{eventNum},#{content},#{userIdx})
	</insert>
	
	<select id="eventReplys" parameterType="map" resultType="com.sp.ticket.EventReply">
		select * from(
			select tb.*, rownum rnum from (
				select replyNum, eventNum, content, ser.userIdx, userName, created 
					from storeeventreply ser
					join tb_user u on ser.userIdx = u.userIdx
					where eventNum=#{eventNum}
					order by replyNum desc
			)tb where rownum &lt;=#{end}
		)where rnum &gt;=#{start}
	</select>
	<select id="replyCount" parameterType="Integer" resultType="Integer">
		select NVL(COUNT(*),0) from storeEventreply where eventNum=#{eventNum}
	</select>
	<delete id="deleteReply" parameterType="com.sp.ticket.EventReply">
		delete from storeEventReply where replyNum=${replyNum}
	</delete>
</mapper>